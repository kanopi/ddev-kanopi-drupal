#!/bin/bash

## Description: Interactive reconfiguration wizard for Kanopi Drupal DDEV
## Usage: project:configure
## Example: "ddev project:configure"
## Aliases: configure,project-configure,prc

#ddev-generated

# Colors and formatting
green='\033[0;32m'
yellow='\033[1;33m'
red='\033[0;31m'
NC='\033[0m'
divider='===================================================\n'

echo -e "\nüîß ${yellow}Kanopi Drupal DDEV Reconfiguration Wizard${NC} üîß"
echo -e "${green}${divider}${NC}"
echo "This tool allows you to reconfigure your existing DDEV environment."
echo "Environment variables will be updated in .ddev/config.yaml"
echo "Press Ctrl+C anytime to exit."
echo ""

# Check if DDEV project exists
if [ ! -f ".ddev/config.yaml" ]; then
    echo "‚ùå DDEV project not found. Please run this command from your DDEV project root."
    echo "üí° If this is a new project, run 'ddev add-on get kanopi/ddev-kanopi-drupal' instead."
    exit 1
fi

# Check if Kanopi add-on is installed
if ! ddev exec printenv HOSTING_PROVIDER >/dev/null 2>&1; then
    echo "‚ùå Kanopi Drupal add-on environment not found."
    echo "Please run 'ddev add-on get kanopi/ddev-kanopi-drupal' first"
    exit 1
fi

# Function to prompt for input with default
prompt_input() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"

    if [ -n "$default" ]; then
        echo -n "$prompt [$default]: "
    else
        echo -n "$prompt: "
    fi

    read -r input
    if [ -z "$input" ] && [ -n "$default" ]; then
        input="$default"
    fi

    eval "$var_name='$input'"
}

# Function to select from options
select_option() {
    local prompt="$1"
    shift
    local options=("$@")

    printf "%s\n" "$prompt" >&2
    for i in "${!options[@]}"; do
        printf "  %d. %s\n" "$((i+1))" "${options[i]}" >&2
    done
    printf "Select option [1]: " >&2

    read -r choice
    choice=${choice:-1}

    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#options[@]}" ]; then
        echo "${options[$((choice-1))]}"
    else
        echo "${options[0]}"
    fi
}

# Show current configuration
echo "üìã Current Configuration:"
echo "------------------------"
CURRENT_PROVIDER=$(ddev exec printenv HOSTING_PROVIDER 2>/dev/null || echo "not set")
CURRENT_SITE=$(ddev exec printenv HOSTING_SITE 2>/dev/null || echo "not set")
CURRENT_ENV=$(ddev exec printenv HOSTING_ENV 2>/dev/null || echo "not set")
CURRENT_THEME=$(ddev exec printenv THEME 2>/dev/null || echo "not set")
CURRENT_THEMENAME=$(ddev exec printenv THEMENAME 2>/dev/null || echo "not set")
CURRENT_MIGRATE_SOURCE=$(ddev exec printenv MIGRATE_DB_SOURCE 2>/dev/null || echo "not set")
CURRENT_MIGRATE_ENV=$(ddev exec printenv MIGRATE_DB_ENV 2>/dev/null || echo "not set")

echo "Hosting Provider: $CURRENT_PROVIDER"
echo "Site: $CURRENT_SITE"
echo "Environment: $CURRENT_ENV"
echo "Theme Path: $CURRENT_THEME"
echo "Theme Name: $CURRENT_THEMENAME"
echo "Migration Source: $CURRENT_MIGRATE_SOURCE"
echo "Migration Environment: $CURRENT_MIGRATE_ENV"
echo ""

# Get hosting provider
echo "üèõÔ∏è Hosting Provider Configuration:"
echo "----------------------------------"
HOST_PROVIDER=$(select_option "Select your hosting provider:" "pantheon" "acquia")
echo "‚úì Selected: $HOST_PROVIDER"

# Get hosting-specific configuration
echo ""
case "$HOST_PROVIDER" in
    "pantheon")
        echo "üèõÔ∏è Pantheon Configuration:"
        echo "--------------------------"
        prompt_input "Site machine name (e.g., my-site)" "$CURRENT_SITE" HOSTING_SITE
        prompt_input "Default environment" "${CURRENT_ENV:-dev}" HOSTING_ENV
        ;;
    "acquia")
        echo "üî∑ Acquia Configuration:"
        echo "-----------------------"
        prompt_input "Application name (e.g., my-app)" "$CURRENT_SITE" HOSTING_SITE
        prompt_input "Default environment" "${CURRENT_ENV:-dev}" HOSTING_ENV
        ;;
esac

# Get theme configuration
echo ""
echo "üé® Theme Configuration:"
echo "----------------------"
prompt_input "Theme path (e.g., themes/custom/mytheme)" "$CURRENT_THEME" THEME_PATH
prompt_input "Theme name/slug (e.g., mytheme)" "$CURRENT_THEMENAME" THEME_NAME

# Get migration settings (optional)
echo ""
echo "üîÑ Migration Settings (optional):"
echo "---------------------------------"
prompt_input "Source site for migrations (optional)" "$CURRENT_MIGRATE_SOURCE" MIGRATE_SOURCE
if [ -n "$MIGRATE_SOURCE" ]; then
    prompt_input "Source environment" "${CURRENT_MIGRATE_ENV:-live}" MIGRATE_ENV
fi

# Update configuration
echo ""
echo "üíæ Updating configuration..."

# Stop DDEV to safely update configuration
echo "Stopping DDEV to update configuration..."
ddev stop

# Update environment variables in .ddev/config.yaml
echo "Setting hosting provider environment variables..."
ddev config --web-environment-add HOSTING_PROVIDER="$HOST_PROVIDER"
ddev config --web-environment-add HOSTING_SITE="$HOSTING_SITE"
ddev config --web-environment-add HOSTING_ENV="$HOSTING_ENV"

# Update theme environment variables
echo "Setting theme environment variables..."
ddev config --web-environment-add THEME="$THEME_PATH"
ddev config --web-environment-add THEMENAME="$THEME_NAME"

# Update migration settings if provided
if [ -n "$MIGRATE_SOURCE" ]; then
    echo "Setting migration environment variables..."
    ddev config --web-environment-add MIGRATE_DB_SOURCE="$MIGRATE_SOURCE"
    ddev config --web-environment-add MIGRATE_DB_ENV="$MIGRATE_ENV"
fi

# Start DDEV with new configuration
echo "Starting DDEV with updated configuration..."
ddev start

echo ""
echo -e "üéâ ${green}Reconfiguration complete!${NC}"
echo ""
echo "üìÅ All settings updated as environment variables in: .ddev/config.yaml"
echo ""
echo -e "${yellow}Next steps:${NC}"

# Provider-specific authentication setup
case "$HOST_PROVIDER" in
    "pantheon")
        echo "1. üîë Set your Pantheon machine token globally (if not already set):"
        echo "   ddev config global --web-environment-add=TERMINUS_MACHINE_TOKEN=your_token"
        echo "   üí° Get your token: https://dashboard.pantheon.io/machine-token/create"
        echo ""
        ;;
    "acquia")
        echo "1. üîë Set your Acquia API credentials globally (if needed):"
        echo "   ddev config global --web-environment-add=ACQUIA_API_KEY=your_api_key"
        echo "   ddev config global --web-environment-add=ACQUIA_API_SECRET=your_api_secret"
        echo "   üí° Get credentials: https://cloud.acquia.com/a/profile/tokens"
        echo ""
        ;;
esac

echo "2. üóÑÔ∏è Refresh your database from $HOST_PROVIDER:"
echo "   ddev refresh"
echo ""
echo "3. üé® Install theme development tools (if needed):"
echo "   ddev theme:install"
echo ""
echo "4. üåê Start developing:"
echo "   ddev theme:watch"
echo ""
echo -e "${green}${divider}${NC}"
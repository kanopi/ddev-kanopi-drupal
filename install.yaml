name: ddev-kanopi-pantheon-drupal

# Based on https://github.com/ddev/ddev/blob/HEAD/pkg/ddevapp/addons.go#L61
project_files:
- commands/

# DDEV version constraint
ddev_version_constraint: ">= v1.22.0"

# Pre-install actions
pre_install_actions:
# Collect user input for configuration
- |
  #ddev-description:Collecting configuration for Kanopi Pantheon Drupal Add-on
  printf "\n🔧 Configuring Kanopi Pantheon Drupal Add-on...\n\n"
  
  # THEME configuration
  printf "📁 Enter the path to your active Drupal theme (like 'themes/custom/mytheme'): "
  read THEME_PATH
  if [ -z "$THEME_PATH" ]; then
    THEME_PATH="themes/custom/themename"
    printf "⚠️  Using default theme path: $THEME_PATH\n"
  fi
  ddev config --web-environment-add THEME="$THEME_PATH"
  
  # THEMENAME configuration  
  printf "\n🎨 Enter your theme name (like 'mytheme'): "
  read THEME_NAME
  if [ -z "$THEME_NAME" ]; then
    THEME_NAME="themename"
    printf "⚠️  Using default theme name: $THEME_NAME\n"
  fi
  ddev config --web-environment-add THEMENAME="$THEME_NAME"
  
  # PANTHEON_SITE configuration
  printf "\n🏛️  Enter your Pantheon project machine name (like 'my-site'): "
  read PANTHEON_SITE
  if [ -z "$PANTHEON_SITE" ]; then
    printf "❌ PANTHEON_SITE is required for proper functionality\n"
    exit 1
  fi
  ddev config --web-environment-add PANTHEON_SITE="$PANTHEON_SITE"
  
  # PANTHEON_ENV configuration
  printf "\n🌍 Enter default Pantheon environment for database pulls (dev/test/live) [dev]: "
  read PANTHEON_ENV
  if [ -z "$PANTHEON_ENV" ]; then
    PANTHEON_ENV="dev"
  fi
  ddev config --web-environment-add PANTHEON_ENV="$PANTHEON_ENV"
  
  printf "\nOptional Migration Configuration:\n"
  printf "Press Enter to skip if you don't need migration support\n\n"
  
  # MIGRATE_DB_SOURCE configuration (optional)
  printf "📦 Enter migration source Pantheon project name (optional): "
  read MIGRATE_SOURCE
  if [ -n "$MIGRATE_SOURCE" ]; then
    ddev config --web-environment-add MIGRATE_DB_SOURCE="$MIGRATE_SOURCE"
  fi
  
  # MIGRATE_DB_ENV configuration (optional)
  printf "\n🌍 Enter migration source environment (dev/test/live) (optional): "
  read MIGRATE_ENV
  if [ -n "$MIGRATE_ENV" ]; then
    ddev config --web-environment-add MIGRATE_DB_ENV="$MIGRATE_ENV"
  fi
  
  printf "\n✅ Configuration collected successfully\n"

# Post-install actions
post_install_actions:
# Apply additional configuration and detect Pantheon settings
- |
  printf "\n⚙️  Applying configuration...\n"
  
  # Set docroot
  ddev config --docroot=web
  
  printf "✅ Configuration applied successfully\n"
  
  # Search for pantheon.yml and configure versions
  echo ""
  echo "🔍 Searching for pantheon.yml to configure PHP and database versions..."
  
  PANTHEON_YML=""
  # Search in common locations relative to project root
  for path in "pantheon.yml" "../pantheon.yml" "../../pantheon.yml"; do
    if [ -f "$path" ]; then
      PANTHEON_YML="$path"
      echo "✅ Found pantheon.yml at: $path"
      break
    fi
  done
  
  if [ -n "$PANTHEON_YML" ]; then
    # Extract PHP version
    PHP_VERSION=$(grep "^php_version:" "$PANTHEON_YML" | sed 's/php_version: *//' | tr -d '"' || echo "")
    if [ -n "$PHP_VERSION" ]; then
      echo "🐘 Setting PHP version to: $PHP_VERSION"
      ddev config --php-version="$PHP_VERSION"
    fi
    
    # Extract database version
    DB_VERSION=$(grep -A1 "^database:" "$PANTHEON_YML" | grep "version:" | sed 's/.*version: *//' | tr -d '"' || echo "")
    if [ -n "$DB_VERSION" ]; then
      echo "🗄️  Setting database version to: $DB_VERSION"
      # Get current database version to check if change is needed
      CURRENT_DB=$(grep -A3 "database:" .ddev/config.yaml | grep "version:" | sed 's/.*version: *//' | tr -d '"' || echo "")
      
      if [ "$CURRENT_DB" != "$DB_VERSION" ]; then
        echo "📦 Changing database from $CURRENT_DB to $DB_VERSION"
        # Stop DDEV first to allow database change
        echo "⏹️  Stopping DDEV to change database version..."
        ddev stop || echo "⚠️  DDEV stop failed, continuing..."
        
        # Use DDEV's debug migrate-database command to handle version change
        echo "🔄 Migrating database to version $DB_VERSION..."
        if ! timeout 120 ddev debug migrate-database "mariadb:$DB_VERSION"; then
          echo "⚠️  Database migration failed or timed out, trying alternative approach..."
          # Alternative: delete database and reconfigure
          ddev delete --omit-snapshot --yes 2>/dev/null || true
          ddev config --database="mariadb:$DB_VERSION" || echo "⚠️  Database config failed"
        fi
        
        echo "🔄 Starting DDEV with database version $DB_VERSION..."
        if ! timeout 120 ddev start; then
          echo "❌ DDEV start failed or timed out"
        fi
      else
        echo "✅ Database version $DB_VERSION already configured"
      fi
    fi
    
    echo "✅ Pantheon versions applied from pantheon.yml"
  else
    echo "ℹ️  No pantheon.yml found, using default versions"
  fi
  
  # Install Redis add-on for all configurations
  echo ""
  echo "📦 Installing Redis add-on..."
  if ! timeout 180 ddev add-on get ddev/ddev-redis; then
    echo "⚠️  Redis add-on installation failed or timed out"
  else
    echo "✅ Redis add-on installed successfully"
  fi
  
  # Install Solr add-on for search functionality
  echo ""
  echo "📦 Installing Solr add-on..."
  if ! timeout 180 ddev add-on get ddev/ddev-drupal-solr; then
    echo "⚠️  Solr add-on installation failed or timed out"
  else
    echo "✅ Solr add-on installed successfully"
  fi

# Explain the installed components
- |
  echo ""
  echo "✅ Kanopi Pantheon Drupal Add-on installed successfully!"
  echo ""
  echo "📦 Installed components:"
  echo "   • Enhanced Pantheon provider with smart backup management"
  echo "   • 17 custom commands for Drupal development workflow"
  echo "   • Theme development tools with Node.js/NPM support"
  echo "   • Cypress testing integration"
  echo "   • Drupal Recipe support"
  echo "   • Migration and backup utilities"
  echo "   • Redis add-on installed"
  echo "   • Solr add-on with DDEV configuration for search functionality"
  echo ""
  echo "🔧 Next steps:"
  echo "   1. Set your Pantheon machine token, if it's not already set:"
  echo "      ddev config global --web-environment-add=TERMINUS_MACHINE_TOKEN=your_token_here"
  echo "   2. Run 'ddev restart' to apply configuration changes"
  echo "   3. Run 'ddev init' to complete project initialization"
  echo "   4. Add Solr configuration to your settings.php (see below)"
  echo ""
  echo "🔍 Solr Configuration:"
  echo "   Add this configuration to web/sites/default/settings.php to connect to DDEV Solr."
  echo "   Note: Adjust the server machine name to match your project's Search API server."
  echo ""
  echo "   /**"
  echo "    * DDEV Solr Configuration"
  echo "    * Override Pantheon search configuration when in DDEV environment"
  echo "    */"
  echo "   if (getenv('IS_DDEV_PROJECT') == 'true') {"
  echo "     // Override any Pantheon search configuration for DDEV"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['host'] = 'solr';"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['port'] = '8983';"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['path'] = '/';"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['core'] = 'dev';"
  echo "     "
  echo "     // Alternative configuration if using different server name"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['host'] = 'solr';"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['port'] = '8983';"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['path'] = '/';"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['core'] = 'dev';"
  echo "   }"
  echo ""
  echo "📚 Run 'ddev help' to see available commands"
  echo ""

removal_action:
# Remove all installed components and add-ons
- |
  echo ""
  echo "🗑️ Removing Kanopi Pantheon Drupal Add-on..."
  echo ""
  
  # Remove Redis add-on
  echo "📦 Removing Redis add-on..."
  if ddev add-on remove ddev-redis 2>/dev/null; then
    echo "✅ Redis add-on removed successfully"
  else
    echo "⚠️ Redis add-on removal failed or not found"
  fi
  
  # Remove Solr add-on
  echo "📦 Removing Solr add-on..."
  if ddev add-on remove ddev-drupal-solr 2>/dev/null; then
    echo "✅ Solr add-on removed successfully"
  else
    echo "⚠️ Solr add-on removal failed or not found"
  fi
  
  # Remove all custom commands
  echo "🔧 Removing custom commands..."
  
  # Remove host commands
  rm -f commands/host/cypress 2>/dev/null || true
  rm -f commands/host/cypress-users 2>/dev/null || true
  rm -f commands/host/init 2>/dev/null || true
  rm -f commands/host/install-cypress 2>/dev/null || true
  rm -f commands/host/open 2>/dev/null || true
  rm -f commands/host/phpmyadmin 2>/dev/null || true
  rm -f commands/host/rebuild 2>/dev/null || true
  rm -f commands/host/refresh 2>/dev/null || true
  rm -f commands/host/solrtail.example 2>/dev/null || true
  rm -f commands/host/testenv 2>/dev/null || true
  rm -f commands/host/README.txt 2>/dev/null || true
  
  # Remove web commands
  rm -f commands/web/install-critical-tools 2>/dev/null || true
  rm -f commands/web/install-theme-tools 2>/dev/null || true
  rm -f commands/web/migrate-prep-db 2>/dev/null || true
  rm -f commands/web/npm 2>/dev/null || true
  rm -f commands/web/npx 2>/dev/null || true
  rm -f commands/web/recipe-apply 2>/dev/null || true
  rm -f commands/web/refresh 2>/dev/null || true
  rm -f commands/web/tickle 2>/dev/null || true
  rm -f commands/web/uuid-rm 2>/dev/null || true
  rm -f commands/web/README.txt 2>/dev/null || true
  
  echo "✅ Custom commands removed"
  
  # Remove any remaining Redis command directories
  rm -rf commands/redis 2>/dev/null || true
  
  # Clean up empty directories
  rmdir commands/host 2>/dev/null || true
  rmdir commands/web 2>/dev/null || true
  rmdir commands 2>/dev/null || true
  
  echo ""
  echo "✅ Kanopi Pantheon Drupal Add-on removed successfully!"
  echo "   • Redis and Solr add-ons uninstalled"
  echo "   • All 17 custom commands removed"
  echo "   • Environment variables preserved (remove manually if needed)"
  echo ""
  echo "💡 Tip: Run 'ddev restart' to apply changes"
  echo ""

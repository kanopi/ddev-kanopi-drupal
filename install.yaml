name: ddev-kanopi-drupal

# Based on https://github.com/ddev/ddev/blob/HEAD/pkg/ddevapp/addons.go#L61
project_files:
- commands/
- php/
- nginx_full/

# DDEV version constraint
ddev_version_constraint: ">= v1.22.0"

# Pre-install actions
pre_install_actions:
# Introduction
- |
  #ddev-description:Configuring Kanopi Pantheon Drupal Add-on
  echo ""
  echo "üîß Configuring Kanopi Pantheon Drupal Add-on..."
  echo ""

# Get PLATFORMSH_CLI_TOKEN from user if we don't have it yet
- |
  #ddev-nodisplay
  if ( {{ contains "TERMINUS_MACHINE_TOKEN" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "TERMINUS_MACHINE_TOKEN" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing TERMINUS_MACHINE_TOKEN."
  else
    printf "\n\nPlease enter your Pantheon Terminus machine token: "
  fi

- |
  #ddev-nodisplay
  if !( {{ contains "TERMINUS_MACHINE_TOKEN" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "TERMINUS_MACHINE_TOKEN" (list .DdevProjectConfig.web_environment | toString) }} ); then
    read token
    # Put the token into the global web environment
    ddev config global --web-environment-add TERMINUS_MACHINE_TOKEN=${token}
    echo "TERMINUS_MACHINE_TOKEN set globally"
  fi


# THEME configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "THEME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing THEME from project config.yaml."
  else
    printf "üìÅ Enter the path to your active Drupal theme (like 'themes/custom/mytheme'): "
  fi

# THEME configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set THEME
  if !( {{ contains "THEME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    read THEME_PATH
    if [ -z "$THEME_PATH" ]; then
      THEME_PATH="themes/custom/themename"
      echo "‚ö†Ô∏è  Using default theme path: $THEME_PATH"
    fi
    echo "THEME = '${THEME_PATH}'"
    ddev config --web-environment-add THEME=${THEME_PATH}
    echo "THEME set to ${THEME_PATH}"
  fi

# THEMENAME configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "THEMENAME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing THEMENAME from project config.yaml."
  else
    printf "üé® Enter your theme name (like 'mytheme'): "
  fi

# THEMENAME configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set THEMENAME
  if !( {{ contains "THEMENAME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    read THEME_NAME
    if [ -z "$THEME_NAME" ]; then
      THEME_NAME="themename"
      echo "‚ö†Ô∏è  Using default theme name: $THEME_NAME"
    fi
    echo "THEMENAME = '${THEME_NAME}'"
    ddev config --web-environment-add THEMENAME=${THEME_NAME}
    echo "THEMENAME set to ${THEME_NAME}"
  fi

# PANTHEON_SITE configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "PANTHEON_SITE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing PANTHEON_SITE from project config.yaml."
  else
    printf "üèõÔ∏è  Enter your Pantheon project machine name (like 'my-site'): "
  fi

# PANTHEON_SITE configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set PANTHEON_SITE
  if !( {{ contains "PANTHEON_SITE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    read PANTHEON_SITE
    if [ -z "$PANTHEON_SITE" ]; then
      echo "‚ùå PANTHEON_SITE is required for proper functionality"
      exit 1
    fi
    echo "PANTHEON_SITE = '${PANTHEON_SITE}'"
    ddev config --web-environment-add PANTHEON_SITE=${PANTHEON_SITE}
    echo "PANTHEON_SITE set to ${PANTHEON_SITE}"
  fi

# PANTHEON_ENV configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "PANTHEON_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing PANTHEON_ENV from project config.yaml."
  else
    printf "üåç Enter default Pantheon environment for database pulls (dev/test/live) [dev]: "
  fi

# PANTHEON_ENV configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set PANTHEON_ENV
  if !( {{ contains "PANTHEON_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    read PANTHEON_ENV
    if [ -z "$PANTHEON_ENV" ]; then
      PANTHEON_ENV="dev"
      echo "‚ö†Ô∏è  Using default environment: $PANTHEON_ENV"
    fi
    echo "PANTHEON_ENV = '${PANTHEON_ENV}'"
    ddev config --web-environment-add PANTHEON_ENV=${PANTHEON_ENV}
    echo "PANTHEON_ENV set to ${PANTHEON_ENV}"
  fi

# Optional Migration Configuration intro
- |
  #ddev-nodisplay
  echo ""
  echo "Optional Migration Configuration:"
  echo "Press Enter to skip if you don't need migration support"
  echo ""

# MIGRATE_DB_SOURCE configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "MIGRATE_DB_SOURCE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing MIGRATE_DB_SOURCE from project config.yaml."
  else
    printf "üì¶ Enter migration source Pantheon project name (optional): "
  fi

# MIGRATE_DB_SOURCE configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set MIGRATE_DB_SOURCE
  if !( {{ contains "MIGRATE_DB_SOURCE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    read MIGRATE_SOURCE
    if [ -n "$MIGRATE_SOURCE" ]; then
      echo "MIGRATE_DB_SOURCE = '${MIGRATE_SOURCE}'"
      ddev config --web-environment-add MIGRATE_DB_SOURCE=${MIGRATE_SOURCE}
      echo "MIGRATE_DB_SOURCE set to ${MIGRATE_SOURCE}"
    fi
  fi

# MIGRATE_DB_ENV configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "MIGRATE_DB_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing MIGRATE_DB_ENV from project config.yaml."
  else
    printf "üåç Enter migration source environment (dev/test/live) (optional): "
  fi

# MIGRATE_DB_ENV configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set MIGRATE_DB_ENV
  if !( {{ contains "MIGRATE_DB_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    read MIGRATE_ENV
    if [ -n "$MIGRATE_ENV" ]; then
      echo "MIGRATE_DB_ENV = '${MIGRATE_ENV}'"
      ddev config --web-environment-add MIGRATE_DB_ENV=${MIGRATE_ENV}
      echo "MIGRATE_DB_ENV set to ${MIGRATE_ENV}"
    fi
  fi

# Configuration complete
- |
  #ddev-nodisplay
  #ddev-description:Configuration complete
  echo ""
  echo "‚úÖ Configuration collected successfully"
  echo ""

# Post-install actions
post_install_actions:
# Apply additional configuration and detect Pantheon settings
- |
  #ddev-nodisplay
  #ddev-description: Installing Redis and Solr add-ons. This may take a moment as Docker images are downloaded.
  echo ""  

- |
  #ddev-nodisplay
  #ddev-description: Update Nginx proxy configuration with Pantheon site values
  echo "üîß Updating Nginx proxy configuration..."
  
  # Get the environment variables from the config file
  PANTHEON_SITE_VALUE=$(grep "PANTHEON_SITE=" ./config.yaml | sed 's/.*PANTHEON_SITE=\([^,]*\).*/\1/' | tr -d '"' || echo "")
  PANTHEON_ENV_VALUE=$(grep "PANTHEON_ENV=" ./config.yaml | sed 's/.*PANTHEON_ENV=\([^,]*\).*/\1/' | tr -d '"' || echo "")
  
  if [ -n "$PANTHEON_SITE_VALUE" ] && [ -n "$PANTHEON_ENV_VALUE" ]; then
    # Update the nginx configuration file with actual values
    sed -i.bak "s/PANTHEON_ENV-PANTHEON_SITE/$PANTHEON_ENV_VALUE-$PANTHEON_SITE_VALUE/g" ./nginx_full/nginx-site.conf
    echo "‚úÖ Updated nginx proxy to redirect to: $PANTHEON_ENV_VALUE-$PANTHEON_SITE_VALUE.pantheonsite.io"
  else
    echo "‚ö†Ô∏è  Could not retrieve PANTHEON_SITE and PANTHEON_ENV values from config for nginx configuration"
    echo "    PANTHEON_SITE_VALUE: '$PANTHEON_SITE_VALUE'"
    echo "    PANTHEON_ENV_VALUE: '$PANTHEON_ENV_VALUE'"
  fi  


- |
  #ddev-description: Install Redis add-on for all configurations
  # Install Redis add-on for all configurations
  echo ""
  echo "üì¶ Installing Redis add-on..."
  ddev add-on get ddev/ddev-redis  
  echo ""
  echo "Ignore DDEV Redis settings file"
  echo "settings.ddev.redis.php" >> ../.gitignore
- |
  #ddev-description: Install Solr add-on for search functionality
  # Install Solr add-on for search functionality
  echo ""
  echo "üì¶ Installing Solr add-on..."
  ddev add-on get ddev/ddev-drupal-solr
- |
  #ddev-description: Setup xdebug output directory
  # Ignore xdebug output folder
  echo ""
  echo "üì¶ Ignore xdebug output folder..."
  mkdir -p ../xdebug
  echo "Output directory for cachegrind files.  See .ddev/php/xdebug.ini" > ../xdebug/README.md
  echo "xdebug/cachegrind.*" >> ../.gitignore

# Explain the installed components
- |
  echo ""
  echo "‚úÖ Kanopi Pantheon Drupal Add-on installed successfully!"
  echo ""
  echo "üì¶ Installed components:"
  echo "   ‚Ä¢ Enhanced Pantheon provider with smart backup management"
  echo "   ‚Ä¢ 17 custom commands for Drupal development workflow"
  echo "   ‚Ä¢ Nginx proxy configuration so you dont have to download assets locally"
  echo "   ‚Ä¢ Theme development tools with Node.js/NPM support"
  echo "   ‚Ä¢ Cypress testing integration"
  echo "   ‚Ä¢ Drupal Recipe support"
  echo "   ‚Ä¢ Migration and backup utilities"
  echo "   ‚Ä¢ Redis add-on installed"
  echo "   ‚Ä¢ Solr add-on with DDEV configuration for search functionality"
  echo "   ‚Ä¢ Setup xdebug performance profiling.  Can be switched back to normal debugging as well."
  echo ""
  echo "üîß Next steps:"
  echo "   1. Add Solr configuration to your settings.php, if needed (see below)"
  echo "   2. Run 'ddev restart' to apply configuration changes"
  echo "   3. Run 'ddev init' to complete project initialization"
  echo ""
  echo "üîç Solr Configuration:"
  echo "   Add this configuration to web/sites/default/settings.php to connect to DDEV Solr."
  echo "   Note: Adjust the server machine name to match your project's Search API server."
  echo ""
  echo "   /**"
  echo "    * DDEV Solr Configuration"
  echo "    * Override Pantheon search configuration when in DDEV environment"
  echo "    */"
  echo "   if (getenv('IS_DDEV_PROJECT') == 'true') {"
  echo "     // Override any Pantheon search configuration for DDEV"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['host'] = 'solr';"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['port'] = '8983';"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['path'] = '/';"
  echo "     \$config['search_api.server.pantheon_solr8']['backend_config']['connector_config']['core'] = 'dev';"
  echo "     "
  echo "     // Alternative configuration if using different server name"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['host'] = 'solr';"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['port'] = '8983';"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['path'] = '/';"
  echo "     \$config['search_api.server.solr']['backend_config']['connector_config']['core'] = 'dev';"
  echo "   }"
  echo ""
  echo "üìö Run 'ddev help' to see available commands"
  echo ""

removal_action:
# Remove all installed components and add-ons
- |
  echo ""
  echo "üóëÔ∏è Removing Kanopi Pantheon Drupal Add-on..."
  echo ""
  
  # Remove Redis add-on
  echo "üì¶ Removing Redis add-on..."
  if ddev add-on remove ddev-redis 2>/dev/null; then
    echo "‚úÖ Redis add-on removed successfully"
  else
    echo "‚ö†Ô∏è Redis add-on removal failed or not found"
  fi
  
  # Remove Solr add-on
  echo "üì¶ Removing Solr add-on..."
  if ddev add-on remove ddev-drupal-solr 2>/dev/null; then
    echo "‚úÖ Solr add-on removed successfully"
  else
    echo "‚ö†Ô∏è Solr add-on removal failed or not found"
  fi
  
  # Remove all custom commands
  echo "üîß Removing custom commands..."
  
  # Remove host commands
  rm -f commands/host/cypress 2>/dev/null || true
  rm -f commands/host/cypress-users 2>/dev/null || true
  rm -f commands/host/init 2>/dev/null || true
  rm -f commands/host/install-cypress 2>/dev/null || true
  rm -f commands/host/open 2>/dev/null || true
  rm -f commands/host/phpmyadmin 2>/dev/null || true
  rm -f commands/host/rebuild 2>/dev/null || true
  rm -f commands/host/refresh 2>/dev/null || true
  rm -f commands/host/solrtail.example 2>/dev/null || true
  rm -f commands/host/testenv 2>/dev/null || true
  rm -f commands/host/README.txt 2>/dev/null || true
  
  # Remove web commands
  rm -f commands/web/install-critical-tools 2>/dev/null || true
  rm -f commands/web/install-theme-tools 2>/dev/null || true
  rm -f commands/web/migrate-prep-db 2>/dev/null || true
  rm -f commands/web/npm 2>/dev/null || true
  rm -f commands/web/npx 2>/dev/null || true
  rm -f commands/web/recipe-apply 2>/dev/null || true
  rm -f commands/web/refresh 2>/dev/null || true
  rm -f commands/web/tickle 2>/dev/null || true
  rm -f commands/web/uuid-rm 2>/dev/null || true
  rm -f commands/web/README.txt 2>/dev/null || true
  
  echo "‚úÖ Custom commands removed"
  
  # Remove PHP xdebug file and nginx config
  rm -f php/xdebug.ini 2>/dev/null || true
  rm -rf../xdebug 2>/dev/null || true
  rm -f nginx_full/nginx-site.conf 2>/dev/null || true
  
  # Remove any remaining Redis command directories
  rm -rf commands/redis 2>/dev/null || true
  
  # Clean up empty directories
  rmdir commands/host 2>/dev/null || true
  rmdir commands/web 2>/dev/null || true
  rmdir commands 2>/dev/null || true
  
  echo ""
  echo "‚úÖ Kanopi Pantheon Drupal Add-on removed successfully!"
  echo "   ‚Ä¢ Redis and Solr add-ons uninstalled"
  echo "   ‚Ä¢ All 17 custom commands removed"
  echo "   ‚Ä¢ Nginx proxy configuration removed"
  echo "   ‚Ä¢ Environment variables preserved (remove manually if needed)"
  echo ""
  echo "üí° Tip: Run 'ddev restart' to apply changes"
  echo ""
